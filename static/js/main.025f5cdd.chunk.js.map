{"version":3,"sources":["containers/App/index.js","index.js"],"names":["App","props","state","baseRange","result","onInputEnter","e","inputs","target","value","split","resultMap","results","forEach","input","index","indexOf","minMax","min","parseInt","max","minIndexInBaseRange","maxIndexInBaseRange","length","i","Object","keys","key","push","setState","join","messageBoxClasses","classnames","this","className","type","placeholder","onKeyUp","React","Component","MOUNT_NODE","document","getElementById","ReactDOM","render"],"mappings":"iQAuGeA,G,MAxFf,YACE,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CAEXC,UAAW,CAAC,IAAM,KAAM,KAAM,KAAM,KAAM,MAC1CC,OAAQ,IAGV,EAAKC,aAAe,SAAAC,GAAM,IAChBH,EAAc,EAAKD,MAAnBC,UAEFI,EADYD,EAAEE,OAAZC,MACaC,MAAM,KACrBC,EAAY,GACZC,EAAU,GAEhBL,EAAOM,QAAQ,SAACC,EAAOC,GAGrB,GAAID,EAAME,QAAQ,MAAQ,EAAG,CAC3B,IAAMC,EAASH,EAAMJ,MAAM,KACrBQ,EAAMC,SAASF,EAAO,IACtBG,EAAMD,SAASF,EAAO,IACtBI,EAAsBlB,EAAUa,QAAQE,GACxCI,EAAsBnB,EAAUa,QAAQI,GAK9C,GAAIA,EAAMjB,EAAU,IAAMe,EAAMf,EAAUA,EAAUoB,OAAS,GAC3D,IAAK,IAAIC,EAAI,EAAGA,EAAIrB,EAAUoB,OAAQC,IACpCb,EAAUR,EAAUqB,KAAOb,EAAUR,EAAUqB,KAAO,GAAK,MAExD,CACL,GAAIH,GAAuB,EACzB,IAAK,IAAIG,EAAI,EAAGA,EAAIH,EAAqBG,IACvCb,EAAUR,EAAUqB,KAAOb,EAAUR,EAAUqB,KAAO,GAAK,EAG/D,GAAIF,GAAuB,EACzB,IAAK,IAAIE,EAAIF,EAAsB,EAAGE,EAAIrB,EAAUoB,OAAQC,IAC1Db,EAAUR,EAAUqB,KAAOb,EAAUR,EAAUqB,KAAO,GAAK,QAKjE,IAAK,IAAIA,EAAI,EAAGA,EAAIrB,EAAUoB,OAAQC,IAChCrB,EAAUqB,KAAOL,SAASL,KAC5BH,EAAUR,EAAUqB,KAAOb,EAAUR,EAAUqB,KAAO,GAAK,KAMnEC,OAAOC,KAAKf,GAAWE,QAAQ,SAAAc,GACzBhB,EAAUgB,KAASpB,EAAOgB,QAC5BX,EAAQgB,KAAKD,KAIjB,EAAKE,SAAS,CACZzB,OAAQQ,EAAQkB,KAAK,SA7DR,EADrB,sEAoEI,IAAMC,EAAoBC,IAAW,SAAU,CAC7C,mBAAoBC,KAAK/B,MAAME,OAAOmB,SAExC,OACE,yBAAKW,UAAU,OAEb,yBAAKA,UAAU,gBACb,2BAAOC,KAAK,OAAOC,YAAY,oBAAoBC,QAASJ,KAAK5B,eACjE,yBAAK6B,UAAU,eAAf,cACa,6BACVD,KAAK/B,MAAMC,UAAU2B,KAAK,OAE7B,yBAAKI,UAAWH,GAAoBE,KAAK/B,MAAME,cAhFzD,GAAyBkC,IAAMC,YCAzBC,G,MAAaC,SAASC,eAAe,SAGzCC,IAASC,OACP,kBAAC,EAAD,MACAJ,I","file":"static/js/main.025f5cdd.chunk.js","sourcesContent":["/**\n *\n * App.js\n *\n * This component is the skeleton around the actual pages, and should only\n * contain code that should be seen on all pages. (e.g. navigation bar)\n *\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport './styles.scss';\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // Base Range is set assuming the values are sequential\n      baseRange: [7000, 7001, 7002, 7003, 7004, 7005],\n      result: []\n    }\n\n    this.onInputEnter = e => {\n      const { baseRange } = this.state;\n      const { value } = e.target;\n      const inputs = value.split(',');\n      const resultMap = {};\n      const results = [];\n\n      inputs.forEach((input, index) => {\n        // If the input is a range, get min max from it, and check if\n        // those exist in the baseRange.\n        if (input.indexOf('-') > -1) {\n          const minMax = input.split('-');\n          const min = parseInt(minMax[0]);\n          const max = parseInt(minMax[1]);\n          const minIndexInBaseRange = baseRange.indexOf(min);\n          const maxIndexInBaseRange = baseRange.indexOf(max);\n\n          // If max is less than the first element of base range, OR min \n          // is less greater than the last element, the complete base range \n          // becomes the result.\n          if (max < baseRange[0] || min > baseRange[baseRange.length - 1]) {\n            for (let i = 0; i < baseRange.length; i++) {\n              resultMap[baseRange[i]] = (resultMap[baseRange[i]] || 0) + 1;\n            }\n          } else {\n            if (minIndexInBaseRange > -1) {\n              for (let i = 0; i < minIndexInBaseRange; i++) {\n                resultMap[baseRange[i]] = (resultMap[baseRange[i]] || 0) + 1;\n              }\n            }\n            if (maxIndexInBaseRange > -1) {\n              for (let i = maxIndexInBaseRange + 1; i < baseRange.length; i++) {\n                resultMap[baseRange[i]] = (resultMap[baseRange[i]] || 0) + 1;\n              }\n            }\n          }\n        } else {\n          for (let i = 0; i < baseRange.length; i++) {\n            if (baseRange[i] !== parseInt(input)) {\n              resultMap[baseRange[i]] = (resultMap[baseRange[i]] || 0) + 1;\n            }\n          }\n        }\n      });\n\n      Object.keys(resultMap).forEach(key => {\n        if (resultMap[key] === inputs.length) {\n          results.push(key);\n        }\n      });\n\n      this.setState({\n        result: results.join(', ')\n      })\n    }\n  }\n\n  render() {\n    const messageBoxClasses = classnames('toastr', {\n      'toastr--active': !!this.state.result.length\n    });\n    return (\n      <div className=\"app\">\n        \n        <div className=\"app__content\">\n          <input type=\"text\" placeholder=\"Start entering...\" onKeyUp={this.onInputEnter} />\n          <div className=\"message-box\">\n            Base Range <br/>\n            {this.state.baseRange.join(', ')}\n          </div>\n          <div className={messageBoxClasses}>{this.state.result}</div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/**\n * app.js\n *\n * This is the entry file for the application, only setup and boilerplate\n * code.\n */\n\n// Import all the third party stuff\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Import root app\nimport App from './containers/App';\nimport './App.scss';\n\nconst MOUNT_NODE = document.getElementById('root');\n\nconst render = () => {\n  ReactDOM.render(\n    <App />,\n    MOUNT_NODE,\n  );\n};\n\nrender();\n"],"sourceRoot":""}